[{"/Users/eunice/Desktop/spotify-circle/client/src/index.js":"1","/Users/eunice/Desktop/spotify-circle/client/src/reportWebVitals.js":"2","/Users/eunice/Desktop/spotify-circle/client/src/App.js":"3","/Users/eunice/Desktop/spotify-circle/client/src/firebase.js":"4","/Users/eunice/Desktop/spotify-circle/client/src/components/Home.js":"5","/Users/eunice/Desktop/spotify-circle/client/src/components/Button.js":"6","/Users/eunice/Desktop/spotify-circle/client/src/functions.js":"7"},{"size":500,"mtime":1610210144635,"results":"8","hashOfConfig":"9"},{"size":362,"mtime":1610210144636,"results":"10","hashOfConfig":"9"},{"size":3798,"mtime":1610254964264,"results":"11","hashOfConfig":"9"},{"size":3969,"mtime":1610254057653,"results":"12","hashOfConfig":"9"},{"size":111,"mtime":1610233312497,"results":"13","hashOfConfig":"9"},{"size":201,"mtime":1610233312496,"results":"14","hashOfConfig":"9"},{"size":1964,"mtime":1610255009053,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"11jntwb",{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"18"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"18"},"/Users/eunice/Desktop/spotify-circle/client/src/index.js",[],["34","35"],"/Users/eunice/Desktop/spotify-circle/client/src/reportWebVitals.js",[],"/Users/eunice/Desktop/spotify-circle/client/src/App.js",["36","37","38","39","40","41","42","43","44"],"import SpotifyWebApi from 'spotify-web-api-js'\nimport React, { useState, useEffect, useCallback } from 'react'\nimport firestoredb, {saveSimilarityScore, addNewFriend} from './firebase'\nimport Button from './components/Button'\nimport Home from './components/Home'\nimport {getHashParams, trackSimilarity, artistsSimilarity, genreSimilarity} from './functions'\n\nfunction App() {\n  const [currentUser, setCurrentUser] = useState('')\n\n  const spotifyApi = new SpotifyWebApi()\n  const params = getHashParams()\n  const token = params.access_token\n  if(token) {\n    spotifyApi.setAccessToken(token)\n  }\n\n  spotifyApi.getMe()\n    .then((user) => {\n      setCurrentUser(user.id) // a string right \n  })\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Home />\n        <Button />\n        <div>\n          Your ID: {currentUser}\n        </div>\n        <TextBox userId={currentUser}/>\n      </header>\n    </div>\n  )\n}\n\nfunction TextBox(props) {\n  let user = props.userId \n\n  const[inputValue, setInputValue] = useState('') // aka id of friend \n  const[data, setData] = useState([])\n  // similarity \n  const [similarityScore, setSimScore] = useState(0)\n  const [trackSimScore, setTrackSimilarity] = useState(0)\n  const [artistsSimScore, setArtistsSimilarity] = useState(0)\n  const [genreSimScore, setGenreSimilarity] = useState(0)\n  // me \n  const [genres, setGenres] = useState([])\n  const [artists, setArtists] = useState([])\n  const [tracks, setTracks] = useState([])\n  // friend\n  const [fgenres, setfGenres] = useState([])\n  const [fartists, setfArtists] = useState([])\n  const [ftracks, setfTracks] = useState([])\n\n  // get current user's ID\n  // get top tracks for current user\n\n    let calculateScore = () => {\n      const docRef = firestoredb.collection('users').doc(user)\n      docRef.get().then((doc) => {\n        if(doc.exists) {\n          let data = doc.data();\n          setData(data)\n          setGenres(data.genres)\n          setArtists(data.artists)\n          setTracks(data.trackId)\n        }\n      }).catch(function(error) {\n        setData(null)\n      })\n      const fdocRef = firestoredb.collection('users').doc(inputValue)\n      fdocRef.get().then((doc) => {\n        if(doc.exists) {\n          let data = doc.data();\n          setData(data) // reusing \n          setfGenres(data.genres)\n          setfArtists(data.artists)\n          setfTracks(data.trackId)\n        }\n      }).catch(function(error) {\n        setData(null)\n      })\n    }\n\n    let calculateScore2 = () => {\n      let ts = trackSimilarity(tracks, ftracks)\n      // setTrackSimilarity(ts)\n      let as = artistsSimilarity(artists, fartists)\n      // setArtistsSimilarity(as)\n      let gs = genreSimilarity(genres, fgenres)\n      // setGenreSimilarity(gs)\n\n      let sum = ts + as + gs\n      sum = sum/3\n      setSimScore(sum)\n      \n      // writing to firebase \n      addNewFriend(user, inputValue)\n      saveSimilarityScore(user, inputValue, sum)\n    }\n\n  return (\n      <div>\n      <form onSubmit={\n        calculateScore \n        }>\n        <label>\n          <input type=\"text\" value={inputValue} onChange={(event) => {\n            setInputValue(event.target.value)\n            }} />\n        </label>\n        <input type=\"submit\" value=\"Submit\" />\n      </form>\n      <div>\n        Similarity Score: {similarityScore}\n      </div>\n      <div>\n        Genres: {genres}\n      </div>\n      <div>\n        Artists: {artists}\n      </div>\n      <div>\n        Tracks: {tracks}\n      </div>\n      <h1>FRIEND</h1>\n      <div>\n        fGenres: {fgenres}\n      </div>\n      <div>\n        fArtists: {fartists}\n      </div>\n      <div>\n        fTracks: {ftracks}\n      </div>\n      <button onClick={calculateScore2}>\n        Show Percentage\n      </button>\n      </div>\n    )\n}\n\nexport default App;\n\n","/Users/eunice/Desktop/spotify-circle/client/src/firebase.js",[],"/Users/eunice/Desktop/spotify-circle/client/src/components/Home.js",[],["45","46"],"/Users/eunice/Desktop/spotify-circle/client/src/components/Button.js",[],"/Users/eunice/Desktop/spotify-circle/client/src/functions.js",["47","48"],"import { useCallback } from \"react\";\n\nexport {getHashParams, trackSimilarity, artistsSimilarity, genreSimilarity}\n\nfunction getHashParams() {\n    var hashParams = {}\n    var e, r = /([^&;=]+)=?([^&;]*)/g,\n        q = window.location.hash.substring(1);\n    e = r.exec(q)\n    while (e) {\n       hashParams[e[1]] = decodeURIComponent(e[2]);\n       e = r.exec(q)\n    }\n    return hashParams\n  }\n\n  // Track Similarity\n function trackSimilarity(usr1Tracks, usr2Tracks){\n    let similarity = usr1Tracks.filter((val) => { // filters current users topTracks with other users'\n      return usr2Tracks.indexOf(val) !== -1\n    })\n    return (similarity.length/usr1Tracks.length)*100  // to be nice \n  }\n\n    // Artists Similarity\n  function artistsSimilarity(usr1Artists, usr2Artists){\n  let similarity = usr1Artists.filter((val) => { // filters current users topTracks with other users'\n    return usr2Artists.indexOf(val) !== -1\n  })\n  return (similarity.length/usr1Artists.length)*100\n  // setArtistsSimilarity((similarity.length/usr1Artists.length)*100)\n}\n\n// Genre Similarity\nfunction genreSimilarity(usr1Genres, usr2Genres){\n  let similarity = usr1Genres.filter((val) => { // filters current users topTracks with other users'\n    return usr2Genres.indexOf(val) !== -1\n  })\n  return (similarity.length/usr1Genres.length)*100\n  // setGenreSimilarity((similarity.length/usr1Genres.length)*100)\n}\n\n// Overall Similarity  \nfunction computeSimilarity(usr1){\n    \n//   let usr1Artists = getTopArtists(usr1)\n//   let usr1Genres = getTopGenres(usr1)\n\n//   let usr2Tracks = getTopTracks(usr2)\n//   let usr2Artists = getTopArtists(usr2)\n//   let usr2Genres = getTopGenres(usr2)\n\n//   let trackSimScore = trackSimilarity(usr1Tracks, usr2Tracks)\n//   let artistsSimScore = artistsSimilarity(usr1Artists, usr2Artists)\n//   let genreSimScore = genreSimilarity(usr1Genres, usr2Genres)\n\n//   let sum = trackSimScore + artistsSimScore + genreSimScore\n//   sum = sum/3\n//   return sum \n}\n",{"ruleId":"49","replacedBy":"50"},{"ruleId":"51","replacedBy":"52"},{"ruleId":"53","severity":1,"message":"54","line":2,"column":27,"nodeType":"55","messageId":"56","endLine":2,"endColumn":36},{"ruleId":"53","severity":1,"message":"57","line":2,"column":38,"nodeType":"55","messageId":"56","endLine":2,"endColumn":49},{"ruleId":"53","severity":1,"message":"58","line":41,"column":9,"nodeType":"55","messageId":"56","endLine":41,"endColumn":13},{"ruleId":"53","severity":1,"message":"59","line":44,"column":10,"nodeType":"55","messageId":"56","endLine":44,"endColumn":23},{"ruleId":"53","severity":1,"message":"60","line":44,"column":25,"nodeType":"55","messageId":"56","endLine":44,"endColumn":43},{"ruleId":"53","severity":1,"message":"61","line":45,"column":10,"nodeType":"55","messageId":"56","endLine":45,"endColumn":25},{"ruleId":"53","severity":1,"message":"62","line":45,"column":27,"nodeType":"55","messageId":"56","endLine":45,"endColumn":47},{"ruleId":"53","severity":1,"message":"63","line":46,"column":10,"nodeType":"55","messageId":"56","endLine":46,"endColumn":23},{"ruleId":"53","severity":1,"message":"64","line":46,"column":25,"nodeType":"55","messageId":"56","endLine":46,"endColumn":43},{"ruleId":"49","replacedBy":"65"},{"ruleId":"51","replacedBy":"66"},{"ruleId":"53","severity":1,"message":"57","line":1,"column":10,"nodeType":"55","messageId":"56","endLine":1,"endColumn":21},{"ruleId":"53","severity":1,"message":"67","line":44,"column":10,"nodeType":"55","messageId":"56","endLine":44,"endColumn":27},"no-native-reassign",["68"],"no-negated-in-lhs",["69"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'useCallback' is defined but never used.","'data' is assigned a value but never used.","'trackSimScore' is assigned a value but never used.","'setTrackSimilarity' is assigned a value but never used.","'artistsSimScore' is assigned a value but never used.","'setArtistsSimilarity' is assigned a value but never used.","'genreSimScore' is assigned a value but never used.","'setGenreSimilarity' is assigned a value but never used.",["68"],["69"],"'computeSimilarity' is defined but never used.","no-global-assign","no-unsafe-negation"]