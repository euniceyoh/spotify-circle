{"version":3,"sources":["firebase.js","bubbleChart.js","App.js","functions.js","reportWebVitals.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firestoredb","firestore","BubbleChart","props","useState","name","similarityScore","dataIn","svgRef","useRef","useEffect","svg","d3","current","append","attr","simulation","force","width","strength","height","d","radiusScale","domain","range","element","selectAll","data","enter","circles","on","event","console","log","labels","style","text","nodes","x","y","viewBox","ref","App","currentUser","setCurrentUser","spotifyApi","SpotifyWebApi","token","e","hashParams","r","q","window","location","hash","substring","exec","decodeURIComponent","getHashParams","access_token","setAccessToken","getMe","then","user","id","className","action","type","value","TextBox","userId","inputValue","setInputValue","setData","setSimScore","genres","setGenres","artists","setArtists","tracks","setTracks","fgenres","setfGenres","fartists","setfArtists","ftracks","setfTracks","fList","setFList","calculateScore2","usr2Tracks","usr2Artists","usr2Genres","ts","filter","val","indexOf","length","as","gs","sum","friendId","friendRef","collection","doc","userRef","get","exists","set","catch","error","addNewFriend","saveSimilarityScore","onSubmit","trackId","onChange","target","onClick","snapshot","forEach","push","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.289cc26f.chunk.js","sourcesContent":["import firebase from 'firebase';\n\nvar firebaseConfig = {\n    apiKey: \"AIzaSyCpghKtDDicPFsyO1340ZlTqvTv-CLkCR4\",\n    authDomain: \"spotify-circle-76dff.firebaseapp.com\",\n    databaseURL: \"https://spotify-circle-76dff-default-rtdb.firebaseio.com\",\n    projectId: \"spotify-circle-76dff\",\n    storageBucket: \"spotify-circle-76dff.appspot.com\",\n    messagingSenderId: \"641874987404\",\n    appId: \"1:641874987404:web:50997de6851e1f7667aea9\",\n    measurementId: \"G-91M1Y3GKZC\"\n};\n\n// Initialize Firebase\nfirebase.initializeApp(firebaseConfig);\n\n//  Initialize Firestore\nlet firestoredb = firebase.firestore();\n\n// If friend is registered in database, add friend doc to user's friend list in firebase and vice versa\nexport const addNewFriend = (userId, friendId) => {\n    let friendRef = firestoredb.collection('users').doc(friendId);\n    let userRef = firestoredb.collection('users').doc(userId);\n\n    // Check that friendId is a valid id in users collection\n    friendRef.get().then(function(doc) {\n        if (doc.exists) {\n            // Check if friend exists in user's friendlist\n            userRef.collection('friendsList').doc(friendId).get().then(function(doc) {\n                if (doc.exists) {\n                    console.log('Friend ' + friendId + 'already exists in user friendList');\n                } else {\n                    // Add friend to user's friendlist\n                    firestoredb.collection('users').doc(userId).collection('friendsList').doc(friendId).set({\n                        similarityScore: null\n                    })\n                    .then(function() {\n                        console.log(\"Friend's document successfully written to user's friends list!\");\n                    })\n                    .catch(function(error) {\n                        console.error(\"Error writing document: \", error);\n                    });\n\n                    // Add user to friend's friendlist\n                    firestoredb.collection('users').doc(friendId).collection('friendsList').doc(userId).set({\n                        similarityScore: null\n                    })\n                    .then(function() {\n                        console.log(\"User's document successfully written to friend's friends list!\");\n                    })\n                    .catch(function(error) {\n                        console.error(\"Error writing document: \", error);\n                    });\n                    }\n            }).catch(function(error) {\n                    console.log(\"Error getting document:\", error);\n            }); \n        } else {\n            // doc.data() will be undefined in this case\n            console.log(\"Friend does not exist in database!\");\n        }\n    }).catch(function(error) {\n        console.log(\"Error getting document:\", error);\n    });\n};\n\n// Write similarity score into both user's and friend's documents within respective friend lists\nexport const saveSimilarityScore = (userId, friendId, similarityScore) => {\n    // Note: firestore does not allow repeating fields in a document\n\n    // Add or overwrite similarity score for friend's document within user's friendList\n    firestoredb.collection('users').doc(userId).collection('friendsList').doc(friendId).set(\n        {\n        similarityScore: similarityScore\n        }\n    )\n    .then(function() {\n        console.log(\"Similarity score successfully written into user's friend list!\");\n    })\n    .catch(function(error) {\n        console.error(\"Error writing document: \", error);\n    });\n\n    // Add or overwrite similarity score for user's  document within friend's friendList\n    firestoredb.collection('users').doc(friendId).collection('friendsList').doc(userId).set({\n        similarityScore: similarityScore\n    })\n    .then(function() {\n        console.log(\"Similarity score successfully written to friend's friends list!\");\n    })\n    .catch(function(error) {\n        console.error(\"Error writing document: \", error);\n    });\n};\n\n\nexport default firestoredb","import React, { useState, useEffect, useRef } from \"react\";\nimport firestoredb from './firebase'\nimport * as d3 from 'd3';\n\nfunction BubbleChart(props) {\n    // dummy data\n    const[dataIn, setData] = useState([\n        { name: \"Eunice\", similarityScore: 12},\n        { name: \"Lawrence\", similarityScore: 73},\n        { name: \"Nick\", similarityScore: 31},\n        { name: \"Carter\", similarityScore: 100},\n        { name: \"Joe Shmoe\", similarityScore: 42},\n        { name: \"Bobby Shmurda\", similarityScore: 35}\n      ])\n\n    const width = 800;\n    const height = 400;\n\n    const svgRef = useRef() // not sure what this does\n\n    useEffect(() => {\n\n        //var svg = d3.select(\"#chart\")\n\n        const svg = d3.select(svgRef.current)\n        .append(\"svg\")\n        .attr(\"height\", \"100%\")\n        .attr(\"width\", \"100%\")\n        .attr(\"transform\", \"translate(0,0)\");\n\n        // Simulation is collection of forces that determines where our elements go\n        // First we force circles to middle with x and y, then we force them apart\n        var simulation = d3.forceSimulation()\n            .force(\"x\", d3.forceX(width / 2).strength(0.05))\n            .force(\"y\", d3.forceY(height / 2).strength(0.05))\n            .force(\"collide\", d3.forceCollide( d => radiusScale(d.similarityScore)))\n\n        // Domain: smallest vs. largest input from data\n        // Range: smallest vs. largest display size\n        var radiusScale = d3.scaleSqrt().domain([1, 100]).range([10, 100])\n\n        var element = svg.selectAll(\".bubble\")\n            .data(dataIn) //\n            .enter()\n            .append(\"g\")\n            //.attr(\"transform\", function(d) { return \"translate(150,100)\" })\n\n        var circles = element\n            .append(\"circle\")\n            //.attr(\"class\", \"bubble\")\n            .attr(\"r\", d => radiusScale(d.similarityScore))\n            .attr(\"fill\", \"lightblue\")\n            //.attr(\"cx\", 100)\n            //.attr(\"cy\", 300)\n            .on(\"click\", function(event, d) {\n                console.log(d);\n            })\n            //.attr(\"transform\", function(d) { return \"translate(\" + d.x + \",\" + d.y + \")\" })\n\n        var labels = element\n            .append(\"text\")\n            //.attr('dy', '.5em')\n            .attr('text-anchor', 'middle')\n            .style('fill', 'white')\n            .style('font-size', 15)\n            .text(function(d) {\n                return d.name;\n            })\n            //.attr(\"transform\", function(d) { return \"translate(\" + d.x + \",\" + d.y + \")\" })\n\n        simulation.nodes(dataIn)\n            .on(\"tick\", ticked)\n\n        function ticked() {\n            circles\n                .attr(\"transform\", function(d) { return \"translate(\" + d.x + \",\" + d.y + \")\" });\n\n            labels\n                .attr(\"transform\", function(d) { return \"translate(\" + d.x + \",\" + d.y + \")\" });\n        }\n    }, [dataIn])\n\n    return (\n        <div>\n             <svg\n                width=\"100%\"\n                height=\"100%\"\n                viewBox=\"0 0 800 800\"\n                ref={svgRef}>\n            </svg>\n        </div>\n    )\n}\n\nexport default BubbleChart;\n","import SpotifyWebApi from 'spotify-web-api-js'\nimport React, { useState, useEffect, useCallback } from 'react'\nimport firestoredb, {saveSimilarityScore, addNewFriend} from './firebase'\nimport {getHashParams, trackSimilarity, artistsSimilarity, genreSimilarity} from './functions'\nimport BubbleChart from './bubbleChart'\n\nexport default function App() {\n  const [currentUser, setCurrentUser] = useState('')\n\n  const spotifyApi = new SpotifyWebApi()\n  const params = getHashParams()\n  const token = params.access_token\n  if(token) {\n    spotifyApi.setAccessToken(token)\n  }\n\n  spotifyApi.getMe()\n    .then((user) => {\n      setCurrentUser(user.id) // a string right\n  })\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>Welcome to Spotify Circle</h1>\n        <div id=\"login\">\n          <form action='http://localhost:8888/login'>\n            <input type=\"submit\" value=\"Login to Spotify\" />\n          </form>\n        </div>\n        <div>\n          Your ID: {currentUser}\n        </div>\n        <TextBox userId={currentUser}/>\n        <BubbleChart userId={currentUser} />\n      </header>\n    </div>\n  )\n}\n\nfunction TextBox(props) {\n let user = props.userId\n\n  const[inputValue, setInputValue] = useState('') // aka id of friend\n  const[data, setData] = useState([])\n  // similarity\n  const [similarityScore, setSimScore] = useState(0)\n  const [trackSimScore, setTrackSimilarity] = useState(0)\n  const [artistsSimScore, setArtistsSimilarity] = useState(0)\n  const [genreSimScore, setGenreSimilarity] = useState(0)\n  // me\n  const [genres, setGenres] = useState([])\n  const [artists, setArtists] = useState([])\n  const [tracks, setTracks] = useState([])\n  // friend\n  const [fgenres, setfGenres] = useState([])\n  const [fartists, setfArtists] = useState([])\n  const [ftracks, setfTracks] = useState([])\n  // friend list\n  const [fList, setFList] = useState([])\n  const [graphState, setGraphState] = useState(false)\n\n  let calculateScore = () => {\n      const docRef = firestoredb.collection('users').doc(user)\n      docRef.get().then((doc) => {\n        if(doc.exists) {\n          let data = doc.data();\n          setData(data)\n          setGenres(data.genres)\n          setArtists(data.artists)\n          setTracks(data.trackId)\n        }\n      }).catch(function(error) {\n        setData(null)\n      })\n      const fdocRef = firestoredb.collection('users').doc(inputValue)\n      fdocRef.get().then((doc) => {\n        if(doc.exists) {\n          let data = doc.data();\n          setData(data) // reusing\n          setfGenres(data.genres)\n          setfArtists(data.artists)\n          setfTracks(data.trackId)\n        }\n      }).catch(function(error) {\n        setData(null)\n      })\n    }\n\n    let calculateScore2 = () => {\n      let ts = trackSimilarity(tracks, ftracks)\n      // setTrackSimilarity(ts)\n      let as = artistsSimilarity(artists, fartists)\n      // setArtistsSimilarity(as)\n      let gs = genreSimilarity(genres, fgenres)\n      // setGenreSimilarity(gs)\n\n      setTracks(ts)\n      setArtists(as)\n      setGenres(gs)\n      let sum = ts + as + gs\n      setSimScore(sum)\n\n      // writing to firebase\n      addNewFriend(user, inputValue)\n      saveSimilarityScore(user, inputValue, sum)\n    }\n\n    let getFriendList = () => {\n      const docRef = firestoredb.collection('users').doc(user).collection('friendsList')\n      docRef.get().then((snapshot) => {\n        const data = []\n        snapshot.forEach(function(doc) {\n          // adding data\n          //data.push({...doc.data(), id: doc.id})\n          data.push([doc.id, doc.data().similarityScore])\n        })\n        setFList(data)\n      }).catch(function(error) {\n        setFList(null)\n      })\n    }\n\n  return (\n      <div>\n      <form onSubmit={\n        () => {\n          calculateScore()\n          calculateScore2()}\n        }>\n        {/* show personal bubble  */}\n        <label>\n          <input type=\"text\" value={inputValue} onChange={(event) => {\n            setInputValue(event.target.value)\n            }} />\n        </label>\n        <input type=\"submit\" value=\"Submit\" />\n      </form>\n      <div>\n        Similarity Score: {similarityScore}\n      </div>\n      <div>\n        Friend List: {(fList)}\n      </div>\n      <button onClick={\n        () => {\n          getFriendList()\n        }\n      }>\n        {/* show friend bubble */}\n        Show Friend\n      </button>\n      \n      </div>\n    )\n}\n","import { useCallback } from \"react\";\n\nexport {getHashParams, trackSimilarity, artistsSimilarity, genreSimilarity}\n\nfunction getHashParams() {\n    var hashParams = {}\n    var e, r = /([^&;=]+)=?([^&;]*)/g,\n        q = window.location.hash.substring(1);\n    e = r.exec(q)\n    while (e) {\n       hashParams[e[1]] = decodeURIComponent(e[2]);\n       e = r.exec(q)\n    }\n    return hashParams\n  }\n\n  // Track Similarity\n function trackSimilarity(usr1Tracks, usr2Tracks){\n    let similarity = usr1Tracks.filter((val) => { // filters current users topTracks with other users'\n      return usr2Tracks.indexOf(val) !== -1\n    })\n    let albums = usr1Tracks\n    return (similarity.length)///usr1Tracks.length)*100  // to be nice\n  }\n\n    // Artists Similarity\n  function artistsSimilarity(usr1Artists, usr2Artists){\n  let similarity = usr1Artists.filter((val) => {\n    return usr2Artists.indexOf(val) !== -1\n  })\n  return (similarity.length)///usr1Artists.length)*100\n  // setArtistsSimilarity((similarity.length/usr1Artists.length)*100)\n}\n\n// Genre Similarity\nfunction genreSimilarity(usr1Genres, usr2Genres){\n  let similarity = usr1Genres.filter((val) => {\n    return usr2Genres.indexOf(val) !== -1\n  })\n  return (similarity.length)///usr1Genres.length)*100\n  // setGenreSimilarity((similarity.length/usr1Genres.length)*100)\n}\n\n// Overall Similarity\nfunction computeSimilarity(usr1){\n\n//   let usr1Artists = getTopArtists(usr1)\n//   let usr1Genres = getTopGenres(usr1)\n\n//   let usr2Tracks = getTopTracks(usr2)\n//   let usr2Artists = getTopArtists(usr2)\n//   let usr2Genres = getTopGenres(usr2)\n\n//   let trackSimScore = trackSimilarity(usr1Tracks, usr2Tracks)\n//   let artistsSimScore = artistsSimilarity(usr1Artists, usr2Artists)\n//   let genreSimScore = genreSimilarity(usr1Genres, usr2Genres)\n\n//   let sum = trackSimScore + artistsSimScore + genreSimScore\n//   sum = sum/3\n//   return sum\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}